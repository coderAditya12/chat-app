// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  fullName         String
  email            String    @unique
  password         String
  bio              String?   @default("")
  profilePic       String?   @default("")
  nativeLanguage   String?   @default("")
  learningLanguage String?   @default("")
  location         String?   @default("")
  isOnboard        Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations for Message model
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")

  // Relations for Friend model
  initiatorFriends Friend[]  @relation("FriendshipInitiator")
  receiverFriends  Friend[]  @relation("FriendshipReceiver")
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Define relations to the User model
  sender   User @relation("MessageSender", fields: [senderId], references: [id])
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id])

  // Indexes for faster queries
  @@index([senderId])
  @@index([receiverId])
  @@index([senderId, receiverId])
}

model Friend {
  id        Int      @id @default(autoincrement())
  userId    String
  friendId  String
  status    String   @default("pending") // pending, accepted, rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define relations to the User model
  user   User @relation("FriendshipInitiator", fields: [userId], references: [id])
  friend User @relation("FriendshipReceiver", fields: [friendId], references: [id])

  // Unique constraint for friendship to prevent duplicates
  @@unique([userId, friendId])
}

